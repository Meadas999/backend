declare type Observer = (value: any) => void;
declare type Selector<T> = (state: any) => T;
declare type Patcher = (state: any, selectedStateValue: any) => any;
declare type Config = {
    patcher?: Patcher;
    selector?: Selector<any>;
};
declare type Updater = (state: any) => void;
declare type stateUpdater = (state: any) => any;
declare type Subscription = {
    observer: Observer;
    selector: Selector<any>;
    reRender?: () => void;
};
declare class GlobalState<T> {
    value: T;
    subscriptions: Array<Subscription>;
    persist: boolean;
    constructor(initialValue: T);
    getValue<ST>(selector?: Selector<ST>): T | ST;
    refresh(): void;
    setValue(newValue: T | stateUpdater, config?: Config): void;
    updateValue(updater: Updater, config?: Config): void;
    private __updateValue;
    subscribe(itemToSubscribe: Subscription | Observer): () => void;
}
declare function createGlobalstate<T>(initialValue: T): GlobalState<T>;
export { GlobalState, createGlobalstate };
